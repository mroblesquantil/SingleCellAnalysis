x <- rzinb(1e5, 100, 0.6, 0.33)
xx <- -2:200
plot(prop.table(table(x)), type = "h")
lines(xx, dzinb(xx, 100, 0.6, 0.33), col = "red")
x <- rzinb(1e5, 100, 0.6, 0.33)
xx <- -2:200
plot(prop.table(table(x)), type = "h")
lines(xx, dzinb(xx, 100, 0.6, 0.33), col = "red")
plot(prop.table(table(x)), type = "h")
x <- rzinb(1e5, 100, 0.6, 0.33)
xx <- -2:200
plot(prop.table(table(x)), type = "h")
lines(xx, dzinb(xx, 100, 0.6, 0.33), col = "red")
xx <- seq(0, 200, by = 0.01)
plot(ecdf(x))
lines(xx, pzinb(xx, 100, 0.6, 0.33), col = "red")
plot(prop.table(table(x)), type = "h")
lines(xx, dzinb(xx, 100, 0.6, 0.33), col = "red")
x <- rzinb(1e5, 100, 0.6, 0.33)
xx <- -2:200
plot(prop.table(table(x)), type = "h")
lines(xx, dzinb(xx, 100, 0.6, 0.33), col = "red")
install.packages('extraDistr')
library(extraDistr)
x <- rzinb(1e5, 200, 0.3, 0.33)                       # Se crean 100.000 datos
# 100: Número de éxitos hasta que pare el experimento
# 0.3: La probabilidad de éxito
# 0.33 la probabilidad de ser un 0 inflado
xx <- -2:200
plot(prop.table(table(x)), type = "h")
lines(xx, dzinb(xx, 100, 0.6, 0.33), col = "red")
install.packages("extraDistr")
num_data <- 100000
num_succes <- 100
prob_succes <- 0.3
prob_zero_inf <- 0.33
x <- rzinb(num_data, num_succes, prob_succes, prob_zero_inf)                       # Se crean 100.000 datos
# 100: Número de éxitos hasta que pare el experimento
# 0.3: La probabilidad de éxito
# 0.33 la probabilidad de ser un 0 inflado
xx <- -2:200
plot(prop.table(table(x)), type = "h")
lines(xx, dzinb(xx, num_succes, prob_succes, prob_zero_inf), col = "red")
install.packages('extraDistr')
install.packages("extraDistr")
num_data <- 100000
num_succes <- 5
prob_succes <- 0.3
prob_zero_inf <- 0.33
x <- rzinb(num_data, num_succes, prob_succes, prob_zero_inf)                       # Se crean 100.000 datos
# 100: Número de éxitos hasta que pare el experimento
# 0.3: La probabilidad de éxito
# 0.33 la probabilidad de ser un 0 inflado
xx <- -2:200
plot(prop.table(table(x)), type = "h")
lines(xx, dzinb(xx, num_succes, prob_succes, prob_zero_inf), col = "red")
num_data <- 100000
num_succes <- 5
prob_succes <- 0.6
prob_zero_inf <- 0.33
x <- rzinb(num_data, num_succes, prob_succes, prob_zero_inf)                       # Se crean 100.000 datos
# 100: Número de éxitos hasta que pare el experimento
# 0.3: La probabilidad de éxito
# 0.33 la probabilidad de ser un 0 inflado
xx <- -2:200
plot(prop.table(table(x)), type = "h")
lines(xx, dzinb(xx, num_succes, prob_succes, prob_zero_inf), col = "red")
num_data <- 100000
num_succes <- 5
prob_succes <- 0.6
prob_zero_inf <- 0.6
x <- rzinb(num_data, num_succes, prob_succes, prob_zero_inf)                       # Se crean 100.000 datos
# 100: Número de éxitos hasta que pare el experimento
# 0.3: La probabilidad de éxito
# 0.33 la probabilidad de ser un 0 inflado
xx <- -2:200
plot(prop.table(table(x)), type = "h")
lines(xx, dzinb(xx, num_succes, prob_succes, prob_zero_inf), col = "red")
num_data <- 100000
num_succes <- 10
prob_succes <- 0.6
prob_zero_inf <- 0.6
x <- rzinb(num_data, num_succes, prob_succes, prob_zero_inf)                       # Se crean 100.000 datos
# 100: Número de éxitos hasta que pare el experimento
# 0.3: La probabilidad de éxito
# 0.33 la probabilidad de ser un 0 inflado
xx <- -2:200
plot(prop.table(table(x)), type = "h")
lines(xx, dzinb(xx, num_succes, prob_succes, prob_zero_inf), col = "red")
num_data <- 100000
num_succes <- 10
prob_succes <- 0.7
prob_zero_inf <- 0.6
x <- rzinb(num_data, num_succes, prob_succes, prob_zero_inf)                       # Se crean 100.000 datos
# 100: Número de éxitos hasta que pare el experimento
# 0.3: La probabilidad de éxito
# 0.33 la probabilidad de ser un 0 inflado
xx <- -2:200
plot(prop.table(table(x)), type = "h")
lines(xx, dzinb(xx, num_succes, prob_succes, prob_zero_inf), col = "red")
num_data <- 100000
num_succes <- 7
prob_succes <- 0.7
prob_zero_inf <- 0.6
x <- rzinb(num_data, num_succes, prob_succes, prob_zero_inf)                       # Se crean 100.000 datos
# 100: Número de éxitos hasta que pare el experimento
# 0.3: La probabilidad de éxito
# 0.33 la probabilidad de ser un 0 inflado
xx <- -2:200
plot(prop.table(table(x)), type = "h")
lines(xx, dzinb(xx, num_succes, prob_succes, prob_zero_inf), col = "red")
num_data <- 100000
num_succes <- 7
prob_succes <- 0.9
prob_zero_inf <- 0.6
x <- rzinb(num_data, num_succes, prob_succes, prob_zero_inf)                       # Se crean 100.000 datos
# 100: Número de éxitos hasta que pare el experimento
# 0.3: La probabilidad de éxito
# 0.33 la probabilidad de ser un 0 inflado
xx <- -2:200
plot(prop.table(table(x)), type = "h")
lines(xx, dzinb(xx, num_succes, prob_succes, prob_zero_inf), col = "red")
num_data <- 100000
num_succes <- 7
prob_succes <- 0.9
prob_zero_inf <- 0.6
x <- rzinb(num_data, num_succes, prob_succes, prob_zero_inf)                       # Se crean 100.000 datos
# 100: Número de éxitos hasta que pare el experimento
# 0.3: La probabilidad de éxito
# 0.33 la probabilidad de ser un 0 inflado
xx <- -2:200
plot(prop.table(table(x)), type = "h")
lines(xx, dzinb(xx, num_succes, prob_succes, prob_zero_inf), col = "red")
num_data <- 100000
num_succes <- 7
prob_succes <- 0.8
prob_zero_inf <- 0.6
x <- rzinb(num_data, num_succes, prob_succes, prob_zero_inf)                       # Se crean 100.000 datos
# 100: Número de éxitos hasta que pare el experimento
# 0.3: La probabilidad de éxito
# 0.33 la probabilidad de ser un 0 inflado
xx <- -2:200
plot(prop.table(table(x)), type = "h")
lines(xx, dzinb(xx, num_succes, prob_succes, prob_zero_inf), col = "red")
num_data <- 100000
num_success <- 100
prob_success <- 0.3
prob_zero_inf <- 0.33
# Generar dos conjuntos de datos 2D siguiendo la distribución binomial negativa
set.seed(123)  # Fijar semilla para reproducibilidad
x1 <- rzinb(num_data, num_success, prob_success, prob_zero_inf)
x2 <- rzinb(num_data, num_success, prob_success, prob_zero_inf)
# Gráficos para el primer conjunto de datos
xx <- -2:200
par(mfrow = c(2, 1))  # Configurar la disposición de la ventana gráfica
plot(prop.table(table(x1)), type = "h", main = "Histograma y PMF - Variable 1")
lines(xx, dzinb(xx, num_success, prob_success, prob_zero_inf), col = "red")
# Gráficos para el segundo conjunto de datos
plot(prop.table(table(x2)), type = "h", main = "Histograma y PMF - Variable 2")
lines(xx, dzinb(xx, num_success, prob_success, prob_zero_inf), col = "red")
par(mfrow = c(1, 1))  # Restaurar la disposición de la ventana gráfica
# Parámetros para la distribución binomial negativa
# Parámetros para la distribución binomial negativa
num_data <- 100000
num_success <- 100
prob_success <- 0.3
prob_zero_inf <- 0.33
# Generar dos conjuntos de datos 2D siguiendo la distribución binomial negativa
set.seed(123)  # Fijar semilla para reproducibilidad
x1 <- rzinb(num_data, num_success, prob_success, prob_zero_inf)
x2 <- rzinb(num_data, num_success, prob_success, prob_zero_inf)
# Gráficos para ambos conjuntos de datos
xx <- -2:200
par(mfrow = c(2, 1))  # Configurar la disposición de la ventana gráfica
# Gráficos para el primer conjunto de datos
plot(prop.table(table(x1)), type = "h", main = "Histograma y PMF - Variable 1")
lines(xx, dzinb(xx, num_success, prob_success, prob_zero_inf), col = "red")
# Gráficos para el segundo conjunto de datos
plot(prop.table(table(x2)), type = "h", main = "Histograma y PMF - Variable 2")
lines(xx, dzinb(xx, num_success, prob_success, prob_zero_inf), col = "red")
par(mfrow = c(1, 1))  # Restaurar la disposición de la ventana gráfica
size1 <- 1.5
prob1 <- 0.4
mu1 <- 8
size2 <- 2.0
prob2 <- 0.3
mu2 <- 6
# Tamaño de la muestra
n <- 100
# Genera una muestra de distribución ZINB en dos dimensiones
set.seed(123)
zinb_sample_var1 <- rzinb(n, mu = mu1, size = size1, prob = prob1)
# Dos dimensiones
size1 <- 1.5
prob1 <- 0.4
mu1 <- 8
size2 <- 2.0
prob2 <- 0.3
mu2 <- 6
# Tamaño de la muestra
n <- 100
# Genera una muestra de distribución ZINB en dos dimensiones
set.seed(123)
zinb_sample_var1 <- rzinb(n,mu1, size1, prob1)
zinb_sample_var2 <- rzinb(n, mu2, size2, prob2)
# Organiza los datos en un data frame de dos dimensiones
data <- data.frame(Variable1 = zinb_sample_var1, Variable2 = zinb_sample_var2)
# Grafica la muestra en un scatter plot
plot(data$Variable1, data$Variable2, main = "Scatter Plot de ZINB en Dos Dimensiones",
xlab = "Variable 1", ylab = "Variable 2")
# Grafica la muestra en un scatter plot
plot(data$Variable1, data$Variable2, main = "Scatter Plot de ZINB en Dos Dimensiones",
xlab = "Variable 1", ylab = "Variable 2", xmin = 0)
data
zinb_sample_var1
zinb_sample_var1 <- rzinb(n,mu1, size1, prob1)
size1 <- 0.8
prob1 <- 0.4
mu1 <- 8
size2 <- 0.9
prob2 <- 0.3
mu2 <- 6
# Tamaño de la muestra
n <- 100
# Genera una muestra de distribución ZINB en dos dimensiones
set.seed(123)
zinb_sample_var1 <- rzinb(n,mu1, size1, prob1)
zinb_sample_var2 <- rzinb(n, mu2, size2, prob2)
# Organiza los datos en un data frame de dos dimensiones
data <- data.frame(Variable1 = zinb_sample_var1, Variable2 = zinb_sample_var2)
# Grafica la muestra en un scatter plot
plot(data$Variable1, data$Variable2, main = "Scatter Plot de ZINB en Dos Dimensiones",
xlab = "Variable 1", ylab = "Variable 2")
library(Seurat)
library(SeuratDisk)
library(Seurat)
library(SeuratDisk)
install.packages(SeuratDisk)
install.packages('SeuratDisk')
library(Seurat)
library(SeuratDisk)
install.packages("remotes")
install_github
remotes::install_github("mojaveazure/seurat-disk")
library(Seurat)
library(SeuratDisk)
library(SeuratData)
remotes::install_github("mojaveazure/seurat-data")
library(SeuratData)
devtools::install_github("satijalab/seurat-data", ref = 'develop')
remotes::install_github("satijalab/seurat-data")
library(SeuratData)
library(patchwork)
library(dplyr)
library("rhdf5")
install.packages("BiocManager")
BiocManager::install("rhdf5")
library(tidyverse)
library(Seurat)
library(Seurat)
library(SeuratDisk)
library(SeuratData)
library(patchwork)
library(dplyr)
library("rhdf5")
library(tidyverse)
remove.packages("rlang")
install.packages("rlang")
install.packages("rlang")
library(tidyverse)
library(Seurat)
library(SeuratDisk)
library(SeuratData)
library(patchwork)
library(dplyr)
library("rhdf5")
library(tidyverse)
print_genes_cells <- function(seurat_obj){
# Obtener el número de características (genes)
num_genes <- nrow(seurat_obj)
# Obtener el número de células (muestras)
num_cells <- ncol(seurat_obj)
# Imprimir los resultados
cat("Número de características (genes):", num_genes, "\n")
cat("Número de células (muestras):", num_cells, "\n")
}
setwd("~/Documents/Tesis/Datos de prueba")
pbmc.data <-  Read10X(data.dir = "generados/zi_negative_poisson_dim10000/hg19/")
library(Seurat)
library(SeuratDisk)
library(SeuratData)
library(patchwork)
library(dplyr)
library("rhdf5")
library(tidyverse)
print_genes_cells <- function(seurat_obj){
# Obtener el número de características (genes)
num_genes <- nrow(seurat_obj)
# Obtener el número de células (muestras)
num_cells <- ncol(seurat_obj)
# Imprimir los resultados
cat("Número de características (genes):", num_genes, "\n")
cat("Número de células (muestras):", num_cells, "\n")
}
pbmc.data <-  Read10X(data.dir = "generados/zi_negative_poisson_dim10000/hg19/")
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k")
print_genes_cells(pbmc)
# Seurat permite hacer un análisis de las observaciones
# Podemos saber: Número de genes únicos detectados en cada célula
#                Número de células activadas en cada gen
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
print_genes_cells(pbmc)
# La normalización por default normaliza por célula, multiplica por un factor de 10000 y aplica logaritmo.
pbmc <- NormalizeData(pbmc)
# Se encuentran los genes altamente variables (que se expresen mucho en algunas células y poco en otras)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
# Vuelve la media a 0 y la varianza a 1
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
print_genes_cells(pbmc)
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca")
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
ElbowPlot(pbmc)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 2.672283915)
pbmc <- RunUMAP(pbmc, dims = 1:10)
DimPlot(pbmc, reduction = "umap")
write.csv(cluster_results, "generados/zi_negative_poisson_dim10000/resultados/clusters.csv", row.names=FALSE)
cluster_results <- pbmc@meta.data
write.csv(cluster_results, "generados/zi_negative_poisson_dim10000/resultados/clusters.csv", row.names=FALSE)
write.csv(cluster_results, "zi_negative_poisson_dim10000/resultados/clusters.csv", row.names=FALSE)
write.csv(cluster_results, "generados/zi_negative_poisson_dim10000/resultados/clusters.csv", row.names=FALSE)
write.csv(cluster_results, "generados/zi_negative_poisson_dim10000/resultados/clusters.csv", row.names=FALSE)
library(Seurat)
library(SeuratDisk)
library(SeuratData)
library(patchwork)
library(dplyr)
library("rhdf5")
library(tidyverse)
path_folder <- "generados/zi_negative_poisson_dim10000/hg19/"
path_output <- "generados/zi_negative_poisson_dim10000/resultados/clusters.csv"
print_genes_cells <- function(seurat_obj){
# Obtener el número de características (genes)
num_genes <- nrow(seurat_obj)
# Obtener el número de células (muestras)
num_cells <- ncol(seurat_obj)
# Imprimir los resultados
cat("Número de características (genes):", num_genes, "\n")
cat("Número de células (muestras):", num_cells, "\n")
}
pbmc.data <-  Read10X(data.dir = path_folder)
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k")
print_genes_cells(pbmc)
# Examinamos algunos genes
#pbmc.data[c("CD3D", "TCL1A", "MS4A1"), 1:30]
# Seurat permite hacer un análisis de las observaciones
# Podemos saber: Número de genes únicos detectados en cada célula
#                Número de células activadas en cada gen
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
#plot1 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "percent.mt")
#plot2 <- FeatureScatter(pbmc, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
#plot1 + plot2
#pbmc <- subset(pbmc, subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)
print_genes_cells(pbmc)
###############################################################################################
############################################################## NORMALIZACIÓN
###############################################################################################
# La normalización por default normaliza por célula, multiplica por un factor de 10000 y aplica logaritmo.
pbmc <- NormalizeData(pbmc)
###############################################################################################
############################################################## HIGHLY VARIABLE FEATURES
###############################################################################################
# Se encuentran los genes altamente variables (que se expresen mucho en algunas células y poco en otras)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
#plot1 + plot2
###############################################################################################
############################################################## SCALING
###############################################################################################
# Vuelve la media a 0 y la varianza a 1
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
###############################################################################################
############################################################## DIMENSIONALITY REDUCTION
###############################################################################################
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
print_genes_cells(pbmc)
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca")
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
ElbowPlot(pbmc)
###############################################################################################
############################################################## DIMENSIONALITY REDUCTION
###############################################################################################
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 2.672283915)
pbmc <- RunUMAP(pbmc, dims = 1:10)
DimPlot(pbmc, reduction = "umap")
cluster_results <- pbmc@meta.data
write.csv(cluster_results, path_output, row.names=FALSE)
path_folder <- "generados/zi_negative_binomial_dim10000/hg19/"
library(Seurat)
library(SeuratDisk)
library(SeuratData)
library(patchwork)
library(dplyr)
library("rhdf5")
library(tidyverse)
path_folder <- "generados/zi_negative_binomial_dim10000/hg19/"
path_output <- "generados/zi_negative_binomial_dim10000/resultados/clusters.csv"
print_genes_cells <- function(seurat_obj){
# Obtener el número de características (genes)
num_genes <- nrow(seurat_obj)
# Obtener el número de células (muestras)
num_cells <- ncol(seurat_obj)
# Imprimir los resultados
cat("Número de características (genes):", num_genes, "\n")
cat("Número de células (muestras):", num_cells, "\n")
}
pbmc.data <-  Read10X(data.dir = path_folder)
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k")
print_genes_cells(pbmc)
# Examinamos algunos genes
#pbmc.data[c("CD3D", "TCL1A", "MS4A1"), 1:30]
# Seurat permite hacer un análisis de las observaciones
# Podemos saber: Número de genes únicos detectados en cada célula
#                Número de células activadas en cada gen
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
library(Seurat)
library(SeuratDisk)
library(SeuratData)
library(patchwork)
library(dplyr)
library("rhdf5")
library(tidyverse)
path_folder <- "generados/zi_negative_binomial_dim10000/hg19/"
path_output <- "generados/zi_negative_binomial_dim10000/resultados/clusters.csv"
print_genes_cells <- function(seurat_obj){
# Obtener el número de características (genes)
num_genes <- nrow(seurat_obj)
# Obtener el número de células (muestras)
num_cells <- ncol(seurat_obj)
# Imprimir los resultados
cat("Número de características (genes):", num_genes, "\n")
cat("Número de células (muestras):", num_cells, "\n")
}
pbmc.data <-  Read10X(data.dir = path_folder)
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k")
print_genes_cells(pbmc)
# Examinamos algunos genes
#pbmc.data[c("CD3D", "TCL1A", "MS4A1"), 1:30]
# Seurat permite hacer un análisis de las observaciones
# Podemos saber: Número de genes únicos detectados en cada célula
#                Número de células activadas en cada gen
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
pbmc.data <-  Read10X(data.dir = path_folder)
pbmc <- CreateSeuratObject(counts = pbmc.data, project = "pbmc3k")
print_genes_cells(pbmc)
# Seurat permite hacer un análisis de las observaciones
# Podemos saber: Número de genes únicos detectados en cada célula
#                Número de células activadas en cada gen
pbmc[["percent.mt"]] <- PercentageFeatureSet(pbmc, pattern = "^MT-")
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
View(pbmc.data)
pbmc.data@x
VlnPlot(pbmc, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
pbmc
pbmc$percent.mt
print_genes_cells(pbmc)
# La normalización por default normaliza por célula, multiplica por un factor de 10000 y aplica logaritmo.
pbmc <- NormalizeData(pbmc)
# Se encuentran los genes altamente variables (que se expresen mucho en algunas células y poco en otras)
pbmc <- FindVariableFeatures(pbmc, selection.method = "vst", nfeatures = 2000)
# Identify the 10 most highly variable genes
top10 <- head(VariableFeatures(pbmc), 10)
# plot variable features with and without labels
plot1 <- VariableFeaturePlot(pbmc)
plot2 <- LabelPoints(plot = plot1, points = top10, repel = TRUE)
# Vuelve la media a 0 y la varianza a 1
all.genes <- rownames(pbmc)
pbmc <- ScaleData(pbmc, features = all.genes)
pbmc <- RunPCA(pbmc, features = VariableFeatures(object = pbmc))
print_genes_cells(pbmc)
print(pbmc[["pca"]], dims = 1:5, nfeatures = 5)
VizDimLoadings(pbmc, dims = 1:2, reduction = "pca")
DimPlot(pbmc, reduction = "pca")
DimHeatmap(pbmc, dims = 1, cells = 500, balanced = TRUE)
ElbowPlot(pbmc)
pbmc <- FindNeighbors(pbmc, dims = 1:10)
pbmc <- FindClusters(pbmc, resolution = 2.672283915)
pbmc <- RunUMAP(pbmc, dims = 1:10)
DimPlot(pbmc, reduction = "umap")
cluster_results <- pbmc@meta.data
write.csv(cluster_results, path_output, row.names=FALSE)
